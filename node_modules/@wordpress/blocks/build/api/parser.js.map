{"version":3,"sources":["@wordpress/blocks/src/api/parser.js"],"names":["STRING_SOURCES","Set","toBooleanAttributeMatcher","matcher","value","undefined","isOfType","type","constructor","Object","Array","isArray","isOfTypes","types","some","isValidByType","isValidByEnum","enumSet","includes","isAmbiguousStringSource","attributeSchema","source","isStringSource","has","isSingleType","matcherFromSource","sourceConfig","selector","attribute","multiline","subMatchers","query","nodeName","toLowerCase","console","error","parseWithAttributeSchema","innerHTML","getBlockAttribute","attributeKey","commentAttributes","enum","default","getBlockAttributes","blockTypeOrName","attributes","blockType","blockAttributes","getMigratedBlock","block","parsedAttributes","name","deprecatedDefinitions","deprecated","length","originalContent","innerBlocks","i","isEligible","stubFalse","isValid","deprecatedBlockType","assign","DEPRECATED_ENTRY_KEYS","migratedAttributes","migratedInnerBlocks","migrate","createBlockWithFallback","blockNode","originalName","blockName","attrs","innerContent","freeformContentFallbackBlock","unregisteredFallbackBlock","trim","reconstitutedBlockNode","originalUndelimitedContent","serializeBlockNode","isCommentDelimited","map","filter","innerBlock","isFallbackBlock","options","childIndex","content","item","join","replace","createParse","parseImplementation","reduce","memo","push","parseWithGrammar","defaultParse"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { parse as hpqParse } from 'hpq';\nimport { flow, castArray, mapValues, omit, stubFalse } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { autop } from '@wordpress/autop';\nimport { applyFilters } from '@wordpress/hooks';\nimport { parse as defaultParse } from '@wordpress/block-serialization-default-parser';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockType,\n\tgetFreeformContentHandlerName,\n\tgetUnregisteredTypeHandlerName,\n} from './registration';\nimport { createBlock } from './factory';\nimport { isValidBlockContent } from './validation';\nimport { getCommentDelimitedContent } from './serializer';\nimport { attr, html, text, query, node, children, prop } from './matchers';\nimport { normalizeBlockType } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\n\n/**\n * Sources which are guaranteed to return a string value.\n *\n * @type {Set}\n */\nconst STRING_SOURCES = new Set( [\n\t'attribute',\n\t'html',\n\t'text',\n\t'tag',\n] );\n\n/**\n * Higher-order hpq matcher which enhances an attribute matcher to return true\n * or false depending on whether the original matcher returns undefined. This\n * is useful for boolean attributes (e.g. disabled) whose attribute values may\n * be technically falsey (empty string), though their mere presence should be\n * enough to infer as true.\n *\n * @param {Function} matcher Original hpq matcher.\n *\n * @return {Function} Enhanced hpq matcher.\n */\nexport const toBooleanAttributeMatcher = ( matcher ) => flow( [\n\tmatcher,\n\t// Expected values from `attr( 'disabled' )`:\n\t//\n\t// <input>\n\t// - Value:       `undefined`\n\t// - Transformed: `false`\n\t//\n\t// <input disabled>\n\t// - Value:       `''`\n\t// - Transformed: `true`\n\t//\n\t// <input disabled=\"disabled\">\n\t// - Value:       `'disabled'`\n\t// - Transformed: `true`\n\t( value ) => value !== undefined,\n] );\n\n/**\n * Returns true if value is of the given JSON schema type, or false otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}      value Value to test.\n * @param {string} type  Type to test.\n *\n * @return {boolean} Whether value is of type.\n */\nexport function isOfType( value, type ) {\n\tswitch ( type ) {\n\t\tcase 'string':\n\t\t\treturn typeof value === 'string';\n\n\t\tcase 'boolean':\n\t\t\treturn typeof value === 'boolean';\n\n\t\tcase 'object':\n\t\t\treturn !! value && value.constructor === Object;\n\n\t\tcase 'null':\n\t\t\treturn value === null;\n\n\t\tcase 'array':\n\t\t\treturn Array.isArray( value );\n\n\t\tcase 'integer':\n\t\tcase 'number':\n\t\t\treturn typeof value === 'number';\n\t}\n\n\treturn true;\n}\n\n/**\n * Returns true if value is of an array of given JSON schema types, or false\n * otherwise.\n *\n * @see http://json-schema.org/latest/json-schema-validation.html#rfc.section.6.25\n *\n * @param {*}        value Value to test.\n * @param {string[]} types Types to test.\n *\n * @return {boolean} Whether value is of types.\n */\nexport function isOfTypes( value, types ) {\n\treturn types.some( ( type ) => isOfType( value, type ) );\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema type\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.1\n *\n * @param {*}                       value Value to test.\n * @param {?(Array<string>|string)} type  Block attribute schema type.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByType( value, type ) {\n\treturn type === undefined || isOfTypes( value, castArray( type ) );\n}\n\n/**\n * Returns true if value is valid per the given block attribute schema enum\n * definition, or false otherwise.\n *\n * @see https://json-schema.org/latest/json-schema-validation.html#rfc.section.6.1.2\n *\n * @param {*}      value   Value to test.\n * @param {?Array} enumSet Block attribute schema enum.\n *\n * @return {boolean} Whether value is valid.\n */\nexport function isValidByEnum( value, enumSet ) {\n\treturn ! Array.isArray( enumSet ) || enumSet.includes( value );\n}\n\n/**\n * Returns true if the given attribute schema describes a value which may be\n * an ambiguous string.\n *\n * Some sources are ambiguously serialized as strings, for which value casting\n * is enabled. This is only possible when a singular type is assigned to the\n * attribute schema, since the string ambiguity makes it impossible to know the\n * correct type of multiple to which to cast.\n *\n * @param {Object} attributeSchema Attribute's schema.\n *\n * @return {boolean} Whether attribute schema defines an ambiguous string\n *                   source.\n */\nexport function isAmbiguousStringSource( attributeSchema ) {\n\tconst { source, type } = attributeSchema;\n\n\tconst isStringSource = STRING_SOURCES.has( source );\n\tconst isSingleType = typeof type === 'string';\n\n\treturn isStringSource && isSingleType;\n}\n\n/**\n * Returns an hpq matcher given a source object.\n *\n * @param {Object} sourceConfig Attribute Source object.\n *\n * @return {Function} A hpq Matcher.\n */\nexport function matcherFromSource( sourceConfig ) {\n\tswitch ( sourceConfig.source ) {\n\t\tcase 'attribute':\n\t\t\tlet matcher = attr( sourceConfig.selector, sourceConfig.attribute );\n\t\t\tif ( sourceConfig.type === 'boolean' ) {\n\t\t\t\tmatcher = toBooleanAttributeMatcher( matcher );\n\t\t\t}\n\n\t\t\treturn matcher;\n\t\tcase 'html':\n\t\t\treturn html( sourceConfig.selector, sourceConfig.multiline );\n\t\tcase 'text':\n\t\t\treturn text( sourceConfig.selector );\n\t\tcase 'children':\n\t\t\treturn children( sourceConfig.selector );\n\t\tcase 'node':\n\t\t\treturn node( sourceConfig.selector );\n\t\tcase 'query':\n\t\t\tconst subMatchers = mapValues( sourceConfig.query, matcherFromSource );\n\t\t\treturn query( sourceConfig.selector, subMatchers );\n\t\tcase 'tag':\n\t\t\treturn flow( [\n\t\t\t\tprop( sourceConfig.selector, 'nodeName' ),\n\t\t\t\t( nodeName ) => nodeName ? nodeName.toLowerCase() : undefined,\n\t\t\t] );\n\t\tdefault:\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error( `Unknown source type \"${ sourceConfig.source }\"` );\n\t}\n}\n\n/**\n * Given a block's raw content and an attribute's schema returns the attribute's\n * value depending on its source.\n *\n * @param {string} innerHTML         Block's raw content.\n * @param {Object} attributeSchema   Attribute's schema.\n *\n * @return {*} Attribute value.\n */\nexport function parseWithAttributeSchema( innerHTML, attributeSchema ) {\n\treturn hpqParse( innerHTML, matcherFromSource( attributeSchema ) );\n}\n\n/**\n * Given an attribute key, an attribute's schema, a block's raw content and the\n * commentAttributes returns the attribute value depending on its source\n * definition of the given attribute key.\n *\n * @param {string} attributeKey      Attribute key.\n * @param {Object} attributeSchema   Attribute's schema.\n * @param {string} innerHTML         Block's raw content.\n * @param {Object} commentAttributes Block's comment attributes.\n *\n * @return {*} Attribute value.\n */\nexport function getBlockAttribute( attributeKey, attributeSchema, innerHTML, commentAttributes ) {\n\tconst { type, enum: enumSet } = attributeSchema;\n\tlet value;\n\n\tswitch ( attributeSchema.source ) {\n\t\t// undefined source means that it's an attribute serialized to the block's \"comment\"\n\t\tcase undefined:\n\t\t\tvalue = commentAttributes ? commentAttributes[ attributeKey ] : undefined;\n\t\t\tbreak;\n\t\tcase 'attribute':\n\t\tcase 'property':\n\t\tcase 'html':\n\t\tcase 'text':\n\t\tcase 'children':\n\t\tcase 'node':\n\t\tcase 'query':\n\t\tcase 'tag':\n\t\t\tvalue = parseWithAttributeSchema( innerHTML, attributeSchema );\n\t\t\tbreak;\n\t}\n\n\tif ( ! isValidByType( value, type ) || ! isValidByEnum( value, enumSet ) ) {\n\t\t// Reject the value if it is not valid. Reverting to the undefined\n\t\t// value ensures the default is respected, if applicable.\n\t\tvalue = undefined;\n\t}\n\n\tif ( value === undefined ) {\n\t\treturn attributeSchema.default;\n\t}\n\n\treturn value;\n}\n\n/**\n * Returns the block attributes of a registered block node given its type.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n * @param {string}        innerHTML       Raw block content.\n * @param {?Object}       attributes      Known block attributes (from delimiters).\n *\n * @return {Object} All block attributes.\n */\nexport function getBlockAttributes( blockTypeOrName, innerHTML, attributes = {} ) {\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst blockAttributes = mapValues( blockType.attributes, ( attributeSchema, attributeKey ) => {\n\t\treturn getBlockAttribute( attributeKey, attributeSchema, innerHTML, attributes );\n\t} );\n\n\treturn applyFilters(\n\t\t'blocks.getBlockAttributes',\n\t\tblockAttributes,\n\t\tblockType,\n\t\tinnerHTML,\n\t\tattributes\n\t);\n}\n\n/**\n * Given a block object, returns a new copy of the block with any applicable\n * deprecated migrations applied, or the original block if it was both valid\n * and no eligible migrations exist.\n *\n * @param {WPBlock} block            Original block object.\n * @param {Object}  parsedAttributes Attributes as parsed from the initial\n *                                   block markup.\n *\n * @return {WPBlock} Migrated block object.\n */\nexport function getMigratedBlock( block, parsedAttributes ) {\n\tconst blockType = getBlockType( block.name );\n\n\tconst { deprecated: deprecatedDefinitions } = blockType;\n\tif ( ! deprecatedDefinitions || ! deprecatedDefinitions.length ) {\n\t\treturn block;\n\t}\n\n\tconst { originalContent, innerBlocks } = block;\n\n\tfor ( let i = 0; i < deprecatedDefinitions.length; i++ ) {\n\t\t// A block can opt into a migration even if the block is valid by\n\t\t// defining isEligible on its deprecation. If the block is both valid\n\t\t// and does not opt to migrate, skip.\n\t\tconst { isEligible = stubFalse } = deprecatedDefinitions[ i ];\n\t\tif ( block.isValid && ! isEligible( parsedAttributes, innerBlocks ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Block type properties which could impact either serialization or\n\t\t// parsing are not considered in the deprecated block type by default,\n\t\t// and must be explicitly provided.\n\t\tconst deprecatedBlockType = Object.assign(\n\t\t\tomit( blockType, DEPRECATED_ENTRY_KEYS ),\n\t\t\tdeprecatedDefinitions[ i ]\n\t\t);\n\n\t\tlet migratedAttributes = getBlockAttributes(\n\t\t\tdeprecatedBlockType,\n\t\t\toriginalContent,\n\t\t\tparsedAttributes\n\t\t);\n\n\t\t// Ignore the deprecation if it produces a block which is not valid.\n\t\tconst isValid = isValidBlockContent(\n\t\t\tdeprecatedBlockType,\n\t\t\tmigratedAttributes,\n\t\t\toriginalContent\n\t\t);\n\n\t\tif ( ! isValid ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tblock = {\n\t\t\t...block,\n\t\t\tisValid: true,\n\t\t};\n\n\t\tlet migratedInnerBlocks = innerBlocks;\n\n\t\t// A block may provide custom behavior to assign new attributes and/or\n\t\t// inner blocks.\n\t\tconst { migrate } = deprecatedBlockType;\n\t\tif ( migrate ) {\n\t\t\t( [\n\t\t\t\tmigratedAttributes = parsedAttributes,\n\t\t\t\tmigratedInnerBlocks = innerBlocks,\n\t\t\t] = castArray( migrate( migratedAttributes, innerBlocks ) ) );\n\t\t}\n\n\t\tblock.attributes = migratedAttributes;\n\t\tblock.innerBlocks = migratedInnerBlocks;\n\t}\n\n\treturn block;\n}\n\n/**\n * Creates a block with fallback to the unknown type handler.\n *\n * @param {Object} blockNode Parsed block node.\n *\n * @return {?Object} An initialized block object (if possible).\n */\nexport function createBlockWithFallback( blockNode ) {\n\tconst { blockName: originalName } = blockNode;\n\tlet {\n\t\tattrs: attributes,\n\t\tinnerBlocks = [],\n\t\tinnerHTML,\n\t} = blockNode;\n\tconst { innerContent } = blockNode;\n\tconst freeformContentFallbackBlock = getFreeformContentHandlerName();\n\tconst unregisteredFallbackBlock = getUnregisteredTypeHandlerName() || freeformContentFallbackBlock;\n\n\tattributes = attributes || {};\n\n\t// Trim content to avoid creation of intermediary freeform segments.\n\tinnerHTML = innerHTML.trim();\n\n\t// Use type from block content if available. Otherwise, default to the\n\t// freeform content fallback.\n\tlet name = originalName || freeformContentFallbackBlock;\n\n\t// Convert 'core/cover-image' block in existing content to 'core/cover'.\n\tif ( 'core/cover-image' === name ) {\n\t\tname = 'core/cover';\n\t}\n\n\t// Convert 'core/text' blocks in existing content to 'core/paragraph'.\n\tif ( 'core/text' === name || 'core/cover-text' === name ) {\n\t\tname = 'core/paragraph';\n\t}\n\n\t// Fallback content may be upgraded from classic editor expecting implicit\n\t// automatic paragraphs, so preserve them. Assumes wpautop is idempotent,\n\t// meaning there are no negative consequences to repeated autop calls.\n\tif ( name === freeformContentFallbackBlock ) {\n\t\tinnerHTML = autop( innerHTML ).trim();\n\t}\n\n\t// Try finding the type for known block name, else fall back again.\n\tlet blockType = getBlockType( name );\n\n\tif ( ! blockType ) {\n\t\t// Since the constituents of the block node are extracted at the start\n\t\t// of the present function, construct a new object rather than reuse\n\t\t// `blockNode`.\n\t\tconst reconstitutedBlockNode = {\n\t\t\tattrs: attributes,\n\t\t\tblockName: originalName,\n\t\t\tinnerBlocks,\n\t\t\tinnerContent,\n\t\t};\n\n\t\t// Preserve undelimited content for use by the unregistered type\n\t\t// handler. A block node's `innerHTML` isn't enough, as that field only\n\t\t// carries the block's own HTML and not its nested blocks'.\n\t\tconst originalUndelimitedContent = serializeBlockNode(\n\t\t\treconstitutedBlockNode,\n\t\t\t{ isCommentDelimited: false }\n\t\t);\n\n\t\t// Preserve full block content for use by the unregistered type\n\t\t// handler, block boundaries included.\n\t\tconst originalContent = serializeBlockNode(\n\t\t\treconstitutedBlockNode,\n\t\t\t{ isCommentDelimited: true }\n\t\t);\n\n\t\t// If detected as a block which is not registered, preserve comment\n\t\t// delimiters in content of unregistered type handler.\n\t\tif ( name ) {\n\t\t\tinnerHTML = originalContent;\n\t\t}\n\n\t\tname = unregisteredFallbackBlock;\n\t\tattributes = { originalName, originalContent, originalUndelimitedContent };\n\t\tblockType = getBlockType( name );\n\t}\n\n\t// Coerce inner blocks from parsed form to canonical form.\n\tinnerBlocks = innerBlocks.map( createBlockWithFallback );\n\n\t// Remove `undefined` innerBlocks.\n\t//\n\t// This is a temporary fix to prevent unrecoverable TypeErrors when handling unexpectedly\n\t// empty freeform block nodes. See https://github.com/WordPress/gutenberg/pull/17164.\n\tinnerBlocks = innerBlocks.filter( ( innerBlock ) => innerBlock );\n\n\tconst isFallbackBlock = (\n\t\tname === freeformContentFallbackBlock ||\n\t\tname === unregisteredFallbackBlock\n\t);\n\n\t// Include in set only if type was determined.\n\tif ( ! blockType || ( ! innerHTML && isFallbackBlock ) ) {\n\t\treturn;\n\t}\n\n\tlet block = createBlock(\n\t\tname,\n\t\tgetBlockAttributes( blockType, innerHTML, attributes ),\n\t\tinnerBlocks\n\t);\n\n\t// Block validation assumes an idempotent operation from source block to serialized block\n\t// provided there are no changes in attributes. The validation procedure thus compares the\n\t// provided source value with the serialized output before there are any modifications to\n\t// the block. When both match, the block is marked as valid.\n\tif ( ! isFallbackBlock ) {\n\t\tblock.isValid = isValidBlockContent( blockType, block.attributes, innerHTML );\n\t}\n\n\t// Preserve original content for future use in case the block is parsed\n\t// as invalid, or future serialization attempt results in an error.\n\tblock.originalContent = block.originalContent || innerHTML;\n\n\tblock = getMigratedBlock( block, attributes );\n\n\treturn block;\n}\n\n/**\n * Serializes a block node into the native HTML-comment-powered block format.\n * CAVEAT: This function is intended for reserializing blocks as parsed by\n * valid parsers and skips any validation steps. This is NOT a generic\n * serialization function for in-memory blocks. For most purposes, see the\n * following functions available in the `@wordpress/blocks` package:\n *\n * @see serializeBlock\n * @see serialize\n *\n * For more on the format of block nodes as returned by valid parsers:\n *\n * @see `@wordpress/block-serialization-default-parser` package\n * @see `@wordpress/block-serialization-spec-parser` package\n *\n * @param {Object}   blockNode                  A block node as returned by a valid parser.\n * @param {?Object}  options                    Serialization options.\n * @param {?boolean} options.isCommentDelimited Whether to output HTML comments around blocks.\n *\n * @return {string} An HTML string representing a block.\n */\nexport function serializeBlockNode( blockNode, options = {} ) {\n\tconst { isCommentDelimited = true } = options;\n\tconst { blockName, attrs = {}, innerBlocks = [], innerContent = [] } = blockNode;\n\n\tlet childIndex = 0;\n\tconst content = innerContent.map( ( item ) =>\n\t\t// `null` denotes a nested block, otherwise we have an HTML fragment\n\t\titem !== null ?\n\t\t\titem :\n\t\t\tserializeBlockNode( innerBlocks[ childIndex++ ], options )\n\t).join( '\\n' ).replace( /\\n+/g, '\\n' ).trim();\n\n\treturn isCommentDelimited ?\n\t\tgetCommentDelimitedContent( blockName, attrs, content ) :\n\t\tcontent;\n}\n\n/**\n * Creates a parse implementation for the post content which returns a list of blocks.\n *\n * @param {Function} parseImplementation Parse implementation.\n *\n * @return {Function} An implementation which parses the post content.\n */\nconst createParse = ( parseImplementation ) =>\n\t( content ) => parseImplementation( content ).reduce( ( memo, blockNode ) => {\n\t\tconst block = createBlockWithFallback( blockNode );\n\t\tif ( block ) {\n\t\t\tmemo.push( block );\n\t\t}\n\t\treturn memo;\n\t}, [] );\n\n/**\n * Parses the post content with a PegJS grammar and returns a list of blocks.\n *\n * @param {string} content The post content.\n *\n * @return {Array} Block list.\n */\nexport const parseWithGrammar = createParse( defaultParse );\n\nexport default parseWithGrammar;\n"]}