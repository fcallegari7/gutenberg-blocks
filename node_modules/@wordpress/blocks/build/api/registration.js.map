{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["DEFAULT_BLOCK_TYPE_SETTINGS","icon","attributes","keywords","save","serverSideBlockDefinitions","unstable__bootstrapServerSideBlockDefinitions","definitions","registerBlockType","name","settings","console","error","test","getBlockType","preFilterSettings","deprecated","map","deprecation","DEPRECATED_ENTRY_KEYS","edit","getCategories","slug","category","title","src","addBlockTypes","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","blockName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error' ] } ] */\n\n/**\n * External dependencies\n */\nimport {\n\tget,\n\tomit,\n\tpick,\n\tisFunction,\n\tisPlainObject,\n\tsome,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { applyFilters } from '@wordpress/hooks';\nimport { select, dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { isValidIcon, normalizeIconObject } from './utils';\nimport { DEPRECATED_ENTRY_KEYS } from './constants';\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPBlockTypeIconRender\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlockType\n *\n * @property {string}           name        Block type's namespaced name.\n * @property {string}           title       Human-readable block type label.\n * @property {string}           category    Block type category classification,\n *                                          used in search interfaces to arrange\n *                                          block types by category.\n * @property {WPBlockTypeIcon} [icon]       Block type icon.\n * @property {string[]}        [keywords]   Additional keywords to produce block\n *                                          type as result in search interfaces.\n * @property {Object}          [attributes] Block type attributes.\n * @property {WPComponent}     [save]       Optional component describing\n *                                          serialized markup structure of a\n *                                          block type.\n * @property {WPComponent}      edit        Component rendering an element to\n *                                          manipulate the attributes of a block\n *                                          in the context of an editor.\n */\n\n/**\n * Default values to assign for omitted optional block type settings.\n *\n * @type {Object}\n */\nexport const DEFAULT_BLOCK_TYPE_SETTINGS = {\n\ticon: 'block-default',\n\tattributes: {},\n\tkeywords: [],\n\tsave: () => null,\n};\n\nexport let serverSideBlockDefinitions = {};\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) { // eslint-disable-line camelcase\n\tserverSideBlockDefinitions = {\n\t\t...serverSideBlockDefinitions,\n\t\t...definitions,\n\t};\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * @param {string} name     Block name.\n * @param {Object} settings Block settings.\n *\n * @return {?WPBlock} The block, if it has been successfully registered;\n *                     otherwise `undefined`.\n */\nexport function registerBlockType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...DEFAULT_BLOCK_TYPE_SETTINGS,\n\t\t...get( serverSideBlockDefinitions, name ),\n\t\t...settings,\n\t};\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error(\n\t\t\t'Block names must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( 'core/blocks' ).getBlockType( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block \"' + name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tconst preFilterSettings = { ...settings };\n\tsettings = applyFilters( 'blocks.registerBlockType', settings, name );\n\n\tif ( settings.deprecated ) {\n\t\tsettings.deprecated = settings.deprecated.map( ( deprecation ) =>\n\t\t\tpick( // Only keep valid deprecation keys.\n\t\t\t\tapplyFilters(\n\t\t\t\t\t'blocks.registerBlockType',\n\t\t\t\t\t// Merge deprecation keys with pre-filter settings\n\t\t\t\t\t// so that filters that depend on specific keys being\n\t\t\t\t\t// present don't fail.\n\t\t\t\t\t{\n\t\t\t\t\t\t// Omit deprecation keys here so that deprecations\n\t\t\t\t\t\t// can opt out of specific keys like \"supports\".\n\t\t\t\t\t\t...omit( preFilterSettings, DEPRECATED_ENTRY_KEYS ),\n\t\t\t\t\t\t...deprecation,\n\t\t\t\t\t},\n\t\t\t\t\tname\n\t\t\t\t),\n\t\t\t\tDEPRECATED_ENTRY_KEYS\n\t\t\t)\n\t\t);\n\t}\n\n\tif ( ! isPlainObject( settings ) ) {\n\t\tconsole.error(\n\t\t\t'Block settings must be a valid object.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! isFunction( settings.save ) ) {\n\t\tconsole.error(\n\t\t\t'The \"save\" property must be a valid function.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( 'edit' in settings && ! isFunction( settings.edit ) ) {\n\t\tconsole.error(\n\t\t\t'The \"edit\" property must be a valid function.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! ( 'category' in settings ) ) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a category.'\n\t\t);\n\t\treturn;\n\t}\n\tif (\n\t\t'category' in settings &&\n\t\t! some( select( 'core/blocks' ).getCategories(), { slug: settings.category } )\n\t) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a registered category.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\tconsole.error(\n\t\t\t'The block \"' + name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\tif ( typeof settings.title !== 'string' ) {\n\t\tconsole.error(\n\t\t\t'Block titles must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\n\tsettings.icon = normalizeIconObject( settings.icon );\n\tif ( ! isValidIcon( settings.icon.src ) ) {\n\t\tconsole.error(\n\t\t\t'The icon passed is invalid. ' +\n\t\t\t'The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( 'core/blocks' ).addBlockTypes( settings );\n\n\treturn settings;\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @return {?WPBlock} The previous block value, if it has been successfully\n *                     unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( 'core/blocks' ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error(\n\t\t\t'Block \"' + name + '\" is not registered.'\n\t\t);\n\t\treturn;\n\t}\n\tdispatch( 'core/blocks' ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( 'core/blocks' ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( 'core/blocks' ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( 'core/blocks' ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( 'core/blocks' ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( 'core/blocks' ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( 'core/blocks' ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( 'core/blocks' ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( 'core/blocks' ).getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( 'core/blocks' ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param  {(string|Object)} nameOrType      Block name or type object\n * @param  {string}          feature         Feature to retrieve\n * @param  {*}               defaultSupports Default value to return if not\n *                                           explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).getBlockSupport( nameOrType, feature, defaultSupports );\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( 'core/blocks' ).hasBlockSupport( nameOrType, feature, defaultSupports );\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType.name === 'core/block';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( 'core/blocks' ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( 'core/blocks' ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( 'core/blocks' ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( 'core/blocks' ).removeBlockStyles( blockName, styleVariationName );\n};\n"]}