{"version":3,"sources":["@wordpress/blocks/src/api/factory.js"],"names":["uuid","every","reduce","castArray","findIndex","isObjectLike","filter","first","flatMap","has","uniq","isFunction","isEmpty","createHooks","applyFilters","getBlockType","getBlockTypes","getGroupingBlockName","normalizeBlockType","createBlock","name","attributes","innerBlocks","blockType","sanitizedAttributes","result","schema","key","value","undefined","hasOwnProperty","default","indexOf","source","Array","isArray","clientId","isValid","cloneBlock","block","mergeAttributes","newInnerBlocks","map","innerBlock","isPossibleTransformForSource","transform","direction","blocks","isMultiBlock","length","firstBlockName","isValidForMultiBlocks","isWildcardBlockTransform","isBlockType","type","sourceBlock","hasMatchingName","isContainerGroupBlock","blockName","isMatch","getBlockTypesForPossibleFromTransforms","allBlockTypes","blockTypesWithPossibleFromTransforms","fromTransforms","getBlockTransforms","findTransform","getBlockTypesForPossibleToTransforms","transformsTo","possibleTransforms","blockNames","transformation","t","includes","isBlockSelectionOfSameType","blocksArray","sourceName","getPossibleBlockTransformations","blockTypesForFromTransforms","blockTypesForToTransforms","transforms","predicate","hooks","i","candidate","addFilter","toString","priority","blockTypeOrName","switchToBlockType","firstBlock","transformationsFrom","transformationsTo","transformationResults","__experimentalConvert","currentBlock","some","firstSwitchedBlock","index","transformedBlock"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport uuid from 'uuid/v4';\nimport {\n\tevery,\n\treduce,\n\tcastArray,\n\tfindIndex,\n\tisObjectLike,\n\tfilter,\n\tfirst,\n\tflatMap,\n\thas,\n\tuniq,\n\tisFunction,\n\tisEmpty,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createHooks, applyFilters } from '@wordpress/hooks';\n\n/**\n * Internal dependencies\n */\nimport { getBlockType, getBlockTypes, getGroupingBlockName } from './registration';\nimport { normalizeBlockType } from './utils';\n\n/**\n * Returns a block object given its type and attributes.\n *\n * @param {string} name        Block name.\n * @param {Object} attributes  Block attributes.\n * @param {?Array} innerBlocks Nested blocks.\n *\n * @return {Object} Block object.\n */\nexport function createBlock( name, attributes = {}, innerBlocks = [] ) {\n\t// Get the type definition associated with a registered block.\n\tconst blockType = getBlockType( name );\n\n\t// Ensure attributes contains only values defined by block type, and merge\n\t// default values for missing attributes.\n\tconst sanitizedAttributes = reduce( blockType.attributes, ( result, schema, key ) => {\n\t\tconst value = attributes[ key ];\n\n\t\tif ( undefined !== value ) {\n\t\t\tresult[ key ] = value;\n\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\n\t\t\tresult[ key ] = schema.default;\n\t\t}\n\n\t\tif ( [ 'node', 'children' ].indexOf( schema.source ) !== -1 ) {\n\t\t\t// Ensure value passed is always an array, which we're expecting in\n\t\t\t// the RichText component to handle the deprecated value.\n\t\t\tif ( typeof result[ key ] === 'string' ) {\n\t\t\t\tresult[ key ] = [ result[ key ] ];\n\t\t\t} else if ( ! Array.isArray( result[ key ] ) ) {\n\t\t\t\tresult[ key ] = [];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}, {} );\n\n\tconst clientId = uuid();\n\n\t// Blocks are stored with a unique ID, the assigned type name, the block\n\t// attributes, and their inner blocks.\n\treturn {\n\t\tclientId,\n\t\tname,\n\t\tisValid: true,\n\t\tattributes: sanitizedAttributes,\n\t\tinnerBlocks,\n\t};\n}\n\n/**\n * Given a block object, returns a copy of the block object, optionally merging\n * new attributes and/or replacing its inner blocks.\n *\n * @param {Object} block              Block instance.\n * @param {Object} mergeAttributes    Block attributes.\n * @param {?Array} newInnerBlocks     Nested blocks.\n *\n * @return {Object} A cloned block.\n */\nexport function cloneBlock( block, mergeAttributes = {}, newInnerBlocks ) {\n\tconst clientId = uuid();\n\n\treturn {\n\t\t...block,\n\t\tclientId,\n\t\tattributes: {\n\t\t\t...block.attributes,\n\t\t\t...mergeAttributes,\n\t\t},\n\t\tinnerBlocks: newInnerBlocks ||\n\t\t\tblock.innerBlocks.map( ( innerBlock ) => cloneBlock( innerBlock ) ),\n\t};\n}\n\n/**\n * Returns a boolean indicating whether a transform is possible based on\n * various bits of context.\n *\n * @param {Object} transform The transform object to validate.\n * @param {string} direction Is this a 'from' or 'to' transform.\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {boolean} Is the transform possible?\n */\nconst isPossibleTransformForSource = ( transform, direction, blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn false;\n\t}\n\n\t// If multiple blocks are selected, only multi block transforms\n\t// or wildcard transforms are allowed.\n\tconst isMultiBlock = blocks.length > 1;\n\tconst firstBlockName = first( blocks ).name;\n\tconst isValidForMultiBlocks = isWildcardBlockTransform( transform ) || ! isMultiBlock || transform.isMultiBlock;\n\tif ( ! isValidForMultiBlocks ) {\n\t\treturn false;\n\t}\n\n\t// Check non-wildcard transforms to ensure that transform is valid\n\t// for a block selection of multiple blocks of different types\n\tif ( ! isWildcardBlockTransform( transform ) && ! every( blocks, { name: firstBlockName } ) ) {\n\t\treturn false;\n\t}\n\n\t// Only consider 'block' type transforms as valid.\n\tconst isBlockType = transform.type === 'block';\n\tif ( ! isBlockType ) {\n\t\treturn false;\n\t}\n\n\t// Check if the transform's block name matches the source block (or is a wildcard)\n\t// only if this is a transform 'from'.\n\tconst sourceBlock = first( blocks );\n\tconst hasMatchingName = direction !== 'from' || transform.blocks.indexOf( sourceBlock.name ) !== -1 || isWildcardBlockTransform( transform );\n\tif ( ! hasMatchingName ) {\n\t\treturn false;\n\t}\n\n\t// Don't allow single Grouping blocks to be transformed into\n\t// a Grouping block.\n\tif ( ! isMultiBlock && isContainerGroupBlock( sourceBlock.name ) && isContainerGroupBlock( transform.blockName ) ) {\n\t\treturn false;\n\t}\n\n\t// If the transform has a `isMatch` function specified, check that it returns true.\n\tif ( isFunction( transform.isMatch ) ) {\n\t\tconst attributes = transform.isMultiBlock ? blocks.map( ( block ) => block.attributes ) : sourceBlock.attributes;\n\t\tif ( ! transform.isMatch( attributes ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * 'from' transforms on other blocks.\n *\n * @param {Array}  blocks  The blocks to transform from.\n *\n * @return {Array} Block types that the blocks can be transformed into.\n */\nconst getBlockTypesForPossibleFromTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst allBlockTypes = getBlockTypes();\n\n\t// filter all blocks to find those with a 'from' transform.\n\tconst blockTypesWithPossibleFromTransforms = filter(\n\t\tallBlockTypes,\n\t\t( blockType ) => {\n\t\t\tconst fromTransforms = getBlockTransforms( 'from', blockType.name );\n\n\t\t\treturn !! findTransform(\n\t\t\t\tfromTransforms,\n\t\t\t\t( transform ) => {\n\t\t\t\t\treturn isPossibleTransformForSource( transform, 'from', blocks );\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\t);\n\n\treturn blockTypesWithPossibleFromTransforms;\n};\n\n/**\n * Returns block types that the 'blocks' can be transformed into, based on\n * the source block's own 'to' transforms.\n *\n * @param {Array} blocks The blocks to transform from.\n *\n * @return {Array} Block types that the source can be transformed into.\n */\nconst getBlockTypesForPossibleToTransforms = ( blocks ) => {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst sourceBlock = first( blocks );\n\tconst blockType = getBlockType( sourceBlock.name );\n\tconst transformsTo = getBlockTransforms( 'to', blockType.name );\n\n\t// filter all 'to' transforms to find those that are possible.\n\tconst possibleTransforms = filter(\n\t\ttransformsTo,\n\t\t( transform ) => {\n\t\t\treturn transform && isPossibleTransformForSource( transform, 'to', blocks );\n\t\t}\n\t);\n\n\t// Build a list of block names using the possible 'to' transforms.\n\tconst blockNames = flatMap(\n\t\tpossibleTransforms,\n\t\t( transformation ) => transformation.blocks\n\t);\n\n\t// Map block names to block types.\n\treturn blockNames.map( ( name ) => getBlockType( name ) );\n};\n\n/**\n * Determines whether transform is a \"block\" type\n * and if so whether it is a \"wildcard\" transform\n * ie: targets \"any\" block type\n *\n * @param {Object} t the Block transform object\n *\n * @return {boolean} whether transform is a wildcard transform\n */\nexport const isWildcardBlockTransform = ( t ) => t && t.type === 'block' && Array.isArray( t.blocks ) && t.blocks.includes( '*' );\n\n/**\n * Determines whether the given Block is the core Block which\n * acts as a container Block for other Blocks as part of the\n * Grouping mechanics\n *\n * @param  {string} name the name of the Block to test against\n *\n * @return {boolean} whether or not the Block is the container Block type\n */\nexport const isContainerGroupBlock = ( name ) => name === getGroupingBlockName();\n\n/**\n * Determines whether the provided Blocks are of the same type\n * (eg: all `core/paragraph`).\n *\n * @param  {Array}  blocksArray the Block definitions\n *\n * @return {boolean} whether or not the given Blocks pass the criteria\n */\nexport const isBlockSelectionOfSameType = ( blocksArray = [] ) => {\n\tif ( ! blocksArray.length ) {\n\t\treturn false;\n\t}\n\tconst sourceName = blocksArray[ 0 ].name;\n\n\treturn every( blocksArray, [ 'name', sourceName ] );\n};\n\n/**\n * Returns an array of block types that the set of blocks received as argument\n * can be transformed into.\n *\n * @param {Array} blocks Blocks array.\n *\n * @return {Array} Block types that the blocks argument can be transformed to.\n */\nexport function getPossibleBlockTransformations( blocks ) {\n\tif ( isEmpty( blocks ) ) {\n\t\treturn [];\n\t}\n\n\tconst blockTypesForFromTransforms = getBlockTypesForPossibleFromTransforms( blocks );\n\tconst blockTypesForToTransforms = getBlockTypesForPossibleToTransforms( blocks );\n\n\treturn uniq( [\n\t\t...blockTypesForFromTransforms,\n\t\t...blockTypesForToTransforms,\n\t] );\n}\n\n/**\n * Given an array of transforms, returns the highest-priority transform where\n * the predicate function returns a truthy value. A higher-priority transform\n * is one with a lower priority value (i.e. first in priority order). Returns\n * null if the transforms set is empty or the predicate function returns a\n * falsey value for all entries.\n *\n * @param {Object[]} transforms Transforms to search.\n * @param {Function} predicate  Function returning true on matching transform.\n *\n * @return {?Object} Highest-priority transform candidate.\n */\nexport function findTransform( transforms, predicate ) {\n\t// The hooks library already has built-in mechanisms for managing priority\n\t// queue, so leverage via locally-defined instance.\n\tconst hooks = createHooks();\n\n\tfor ( let i = 0; i < transforms.length; i++ ) {\n\t\tconst candidate = transforms[ i ];\n\t\tif ( predicate( candidate ) ) {\n\t\t\thooks.addFilter(\n\t\t\t\t'transform',\n\t\t\t\t'transform/' + i.toString(),\n\t\t\t\t( result ) => result ? result : candidate,\n\t\t\t\tcandidate.priority\n\t\t\t);\n\t\t}\n\t}\n\n\t// Filter name is arbitrarily chosen but consistent with above aggregation.\n\treturn hooks.applyFilters( 'transform', null );\n}\n\n/**\n * Returns normal block transforms for a given transform direction, optionally\n * for a specific block by name, or an empty array if there are no transforms.\n * If no block name is provided, returns transforms for all blocks. A normal\n * transform object includes `blockName` as a property.\n *\n * @param {string}  direction Transform direction (\"to\", \"from\").\n * @param {string|Object} blockTypeOrName  Block type or name.\n *\n * @return {Array} Block transforms for direction.\n */\nexport function getBlockTransforms( direction, blockTypeOrName ) {\n\t// When retrieving transforms for all block types, recurse into self.\n\tif ( blockTypeOrName === undefined ) {\n\t\treturn flatMap(\n\t\t\tgetBlockTypes(),\n\t\t\t( { name } ) => getBlockTransforms( direction, name )\n\t\t);\n\t}\n\n\t// Validate that block type exists and has array of direction.\n\tconst blockType = normalizeBlockType( blockTypeOrName );\n\tconst { name: blockName, transforms } = blockType || {};\n\tif ( ! transforms || ! Array.isArray( transforms[ direction ] ) ) {\n\t\treturn [];\n\t}\n\n\t// Map transforms to normal form.\n\treturn transforms[ direction ].map( ( transform ) => ( {\n\t\t...transform,\n\t\tblockName,\n\t} ) );\n}\n\n/**\n * Switch one or more blocks into one or more blocks of the new block type.\n *\n * @param {Array|Object} blocks Blocks array or block object.\n * @param {string}       name   Block name.\n *\n * @return {?Array} Array of blocks or null.\n */\nexport function switchToBlockType( blocks, name ) {\n\tconst blocksArray = castArray( blocks );\n\tconst isMultiBlock = blocksArray.length > 1;\n\tconst firstBlock = blocksArray[ 0 ];\n\tconst sourceName = firstBlock.name;\n\n\t// Unless it's a Grouping Block then for multi block selections\n\t// check that all Blocks are of the same type otherwise\n\t// we can't run a conversion\n\tif ( ! isContainerGroupBlock( name ) && isMultiBlock && ! isBlockSelectionOfSameType( blocksArray ) ) {\n\t\treturn null;\n\t}\n\n\t// Find the right transformation by giving priority to the \"to\"\n\t// transformation.\n\tconst transformationsFrom = getBlockTransforms( 'from', name );\n\tconst transformationsTo = getBlockTransforms( 'to', sourceName );\n\n\tconst transformation =\n\t\tfindTransform(\n\t\t\ttransformationsTo,\n\t\t\t( t ) => t.type === 'block' && ( ( isWildcardBlockTransform( t ) ) || t.blocks.indexOf( name ) !== -1 ) && ( ! isMultiBlock || t.isMultiBlock )\n\t\t) ||\n\t\tfindTransform(\n\t\t\ttransformationsFrom,\n\t\t\t( t ) => t.type === 'block' && ( ( isWildcardBlockTransform( t ) ) || t.blocks.indexOf( sourceName ) !== -1 ) && ( ! isMultiBlock || t.isMultiBlock )\n\t\t);\n\n\t// Stop if there is no valid transformation.\n\tif ( ! transformation ) {\n\t\treturn null;\n\t}\n\n\tlet transformationResults;\n\n\tif ( transformation.isMultiBlock ) {\n\t\tif ( has( transformation, '__experimentalConvert' ) ) {\n\t\t\ttransformationResults = transformation.__experimentalConvert( blocksArray );\n\t\t} else {\n\t\t\ttransformationResults = transformation.transform(\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.attributes ),\n\t\t\t\tblocksArray.map( ( currentBlock ) => currentBlock.innerBlocks ),\n\t\t\t);\n\t\t}\n\t} else if ( has( transformation, '__experimentalConvert' ) ) {\n\t\ttransformationResults = transformation.__experimentalConvert( firstBlock );\n\t} else {\n\t\ttransformationResults = transformation.transform( firstBlock.attributes, firstBlock.innerBlocks );\n\t}\n\n\t// Ensure that the transformation function returned an object or an array\n\t// of objects.\n\tif ( ! isObjectLike( transformationResults ) ) {\n\t\treturn null;\n\t}\n\n\t// If the transformation function returned a single object, we want to work\n\t// with an array instead.\n\ttransformationResults = castArray( transformationResults );\n\n\t// Ensure that every block object returned by the transformation has a\n\t// valid block type.\n\tif ( transformationResults.some( ( result ) => ! getBlockType( result.name ) ) ) {\n\t\treturn null;\n\t}\n\n\tconst firstSwitchedBlock = findIndex( transformationResults, ( result ) => result.name === name );\n\n\t// Ensure that at least one block object returned by the transformation has\n\t// the expected \"destination\" block type.\n\tif ( firstSwitchedBlock < 0 ) {\n\t\treturn null;\n\t}\n\n\treturn transformationResults.map( ( result, index ) => {\n\t\tconst transformedBlock = {\n\t\t\t...result,\n\t\t\t// The first transformed block whose type matches the \"destination\"\n\t\t\t// type gets to keep the existing client ID of the first block.\n\t\t\tclientId: index === firstSwitchedBlock ? firstBlock.clientId : result.clientId,\n\t\t};\n\n\t\t/**\n\t\t * Filters an individual transform result from block transformation.\n\t\t * All of the original blocks are passed, since transformations are\n\t\t * many-to-many, not one-to-one.\n\t\t *\n\t\t * @param {Object}   transformedBlock The transformed block.\n\t\t * @param {Object[]} blocks           Original blocks transformed.\n\t\t */\n\t\treturn applyFilters( 'blocks.switchToBlockType.transformedBlock', transformedBlock, blocks );\n\t} );\n}\n"]}