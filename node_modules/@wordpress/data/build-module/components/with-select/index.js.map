{"version":3,"sources":["@wordpress/data/src/components/with-select/index.js"],"names":["createHigherOrderComponent","pure","useSelect","withSelect","mapSelectToProps","WrappedComponent","ownProps","mapSelect","select","registry","mergeProps"],"mappings":";;;AAAA;;;AAGA,SAASA,0BAAT,EAAqCC,IAArC,QAAiD,oBAAjD;AAEA;;;;AAGA,OAAOC,SAAP,MAAsB,eAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAEC,gBAAF;AAAA,SAAwBJ,0BAA0B,CACpE,UAAEK,gBAAF;AAAA,WAAwBJ,IAAI,CAC3B,UAAEK,QAAF,EAAgB;AACf,UAAMC,SAAS,GACd,SADKA,SACL,CAAEC,MAAF,EAAUC,QAAV;AAAA,eAAwBL,gBAAgB,CACvCI,MADuC,EAEvCF,QAFuC,EAGvCG,QAHuC,CAAxC;AAAA,OADD;;AAMA,UAAMC,UAAU,GAAGR,SAAS,CAAEK,SAAF,CAA5B;AACA,aAAO,cAAC,gBAAD,eAAuBD,QAAvB,EAAuCI,UAAvC,EAAP;AACA,KAV0B,CAA5B;AAAA,GADoE,EAapE,YAboE,CAAlD;AAAA,CAAnB;;AAgBA,eAAeP,UAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent, pure } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport useSelect from '../use-select';\n\n/**\n * Higher-order component used to inject state-derived props using registered\n * selectors.\n *\n * @param {Function} mapSelectToProps Function called on every state change,\n *                                   expected to return object of props to\n *                                   merge with the component's own props.\n *\n * @example\n * ```js\n * function PriceDisplay( { price, currency } ) {\n * \treturn new Intl.NumberFormat( 'en-US', {\n * \t\tstyle: 'currency',\n * \t\tcurrency,\n * \t} ).format( price );\n * }\n *\n * const { withSelect } = wp.data;\n *\n * const HammerPriceDisplay = withSelect( ( select, ownProps ) => {\n * \tconst { getPrice } = select( 'my-shop' );\n * \tconst { currency } = ownProps;\n *\n * \treturn {\n * \t\tprice: getPrice( 'hammer', currency ),\n * \t};\n * } )( PriceDisplay );\n *\n * // Rendered in the application:\n * //\n * //  <HammerPriceDisplay currency=\"USD\" />\n * ```\n * In the above example, when `HammerPriceDisplay` is rendered into an\n * application, it will pass the price into the underlying `PriceDisplay`\n * component and update automatically if the price of a hammer ever changes in\n * the store.\n *\n * @return {Component} Enhanced component with merged state data props.\n */\nconst withSelect = ( mapSelectToProps ) => createHigherOrderComponent(\n\t( WrappedComponent ) => pure(\n\t\t( ownProps ) => {\n\t\t\tconst mapSelect =\n\t\t\t\t( select, registry ) => mapSelectToProps(\n\t\t\t\t\tselect,\n\t\t\t\t\townProps,\n\t\t\t\t\tregistry\n\t\t\t\t);\n\t\t\tconst mergeProps = useSelect( mapSelect );\n\t\t\treturn <WrappedComponent { ...ownProps } { ...mergeProps } />;\n\t\t}\n\t),\n\t'withSelect'\n);\n\nexport default withSelect;\n"]}