{"version":3,"sources":["@wordpress/data/src/components/with-dispatch/index.js"],"names":["createHigherOrderComponent","useDispatchWithMap","withDispatch","mapDispatchToProps","WrappedComponent","ownProps","mapDispatch","dispatch","registry","dispatchProps"],"mappings":";;;AAAA;;;AAGA,SAASA,0BAAT,QAA2C,oBAA3C;AAEA;;;;AAGA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAEC,kBAAF;AAAA,SAA0BH,0BAA0B,CACxE,UAAEI,gBAAF;AAAA,WAAwB,UAAEC,QAAF,EAAgB;AACvC,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAAEC,QAAF,EAAYC,QAAZ;AAAA,eAA0BL,kBAAkB,CAC/DI,QAD+D,EAE/DF,QAF+D,EAG/DG,QAH+D,CAA5C;AAAA,OAApB;;AAKA,UAAMC,aAAa,GAAGR,kBAAkB,CAAEK,WAAF,EAAe,EAAf,CAAxC;AACA,aAAO,cAAC,gBAAD,eAAuBD,QAAvB,EAAuCI,aAAvC,EAAP;AACA,KARD;AAAA,GADwE,EAUxE,cAVwE,CAApD;AAAA,CAArB;;AAaA,eAAeP,YAAf","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createHigherOrderComponent } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { useDispatchWithMap } from '../use-dispatch';\n\n/**\n * Higher-order component used to add dispatch props using registered action\n * creators.\n *\n * @param {Function} mapDispatchToProps A function of returning an object of\n *                                      prop names where value is a\n *                                      dispatch-bound action creator, or a\n *                                      function to be called with the\n *                                      component's props and returning an\n *                                      action creator.\n *\n * @example\n * ```jsx\n * function Button( { onClick, children } ) {\n *     return <button type=\"button\" onClick={ onClick }>{ children }</button>;\n * }\n *\n * const { withDispatch } = wp.data;\n *\n * const SaleButton = withDispatch( ( dispatch, ownProps ) => {\n *     const { startSale } = dispatch( 'my-shop' );\n *     const { discountPercent } = ownProps;\n *\n *     return {\n *         onClick() {\n *             startSale( discountPercent );\n *         },\n *     };\n * } )( Button );\n *\n * // Rendered in the application:\n * //\n * // <SaleButton discountPercent=\"20\">Start Sale!</SaleButton>\n * ```\n *\n * @example\n * In the majority of cases, it will be sufficient to use only two first params\n * passed to `mapDispatchToProps` as illustrated in the previous example.\n * However, there might be some very advanced use cases where using the\n * `registry` object might be used as a tool to optimize the performance of\n * your component. Using `select` function from the registry might be useful\n * when you need to fetch some dynamic data from the store at the time when the\n * event is fired, but at the same time, you never use it to render your\n * component. In such scenario, you can avoid using the `withSelect` higher\n * order component to compute such prop, which might lead to unnecessary\n * re-renders of your component caused by its frequent value change.\n * Keep in mind, that `mapDispatchToProps` must return an object with functions\n * only.\n *\n * ```jsx\n * function Button( { onClick, children } ) {\n *     return <button type=\"button\" onClick={ onClick }>{ children }</button>;\n * }\n *\n * const { withDispatch } = wp.data;\n *\n * const SaleButton = withDispatch( ( dispatch, ownProps, { select } ) => {\n *    // Stock number changes frequently.\n *    const { getStockNumber } = select( 'my-shop' );\n *    const { startSale } = dispatch( 'my-shop' );\n *    return {\n *        onClick() {\n *            const discountPercent = getStockNumber() > 50 ? 10 : 20;\n *            startSale( discountPercent );\n *        },\n *    };\n * } )( Button );\n *\n * // Rendered in the application:\n * //\n * //  <SaleButton>Start Sale!</SaleButton>\n * ```\n *\n * _Note:_ It is important that the `mapDispatchToProps` function always\n * returns an object with the same keys. For example, it should not contain\n * conditions under which a different value would be returned.\n *\n * @return {Component} Enhanced component with merged dispatcher props.\n */\nconst withDispatch = ( mapDispatchToProps ) => createHigherOrderComponent(\n\t( WrappedComponent ) => ( ownProps ) => {\n\t\tconst mapDispatch = ( dispatch, registry ) => mapDispatchToProps(\n\t\t\tdispatch,\n\t\t\townProps,\n\t\t\tregistry\n\t\t);\n\t\tconst dispatchProps = useDispatchWithMap( mapDispatch, [] );\n\t\treturn <WrappedComponent { ...ownProps } { ...dispatchProps } />;\n\t},\n\t'withDispatch'\n);\n\nexport default withDispatch;\n"]}