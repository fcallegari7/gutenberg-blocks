{"version":3,"sources":["@wordpress/data/src/components/use-dispatch/use-dispatch-with-map.js"],"names":["useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","useDispatchWithMap","dispatchMap","deps","registry","currentDispatchMap","current","currentDispatchProps","dispatch","dispatcher","propName","console","warn"],"mappings":";;;;;;;;;;;AAGA;;AAKA;;AAKA;;AAbA;;;;AAKA;;;;AAKA;;;;AAKA;;;;;;;;;AASA,IAAMA,yBAAyB,GAC9B,OAAOC,MAAP,KAAkB,WAAlB,GAAgCC,wBAAhC,GAAkDC,kBADnD;AAGA;;;;;;;;;;;;;;;AAcA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAEC,WAAF,EAAeC,IAAf,EAAyB;AACnD,MAAMC,QAAQ,GAAG,2BAAjB;AACA,MAAMC,kBAAkB,GAAG,qBAAQH,WAAR,CAA3B;AAEAL,EAAAA,yBAAyB,CAAE,YAAM;AAChCQ,IAAAA,kBAAkB,CAACC,OAAnB,GAA6BJ,WAA7B;AACA,GAFwB,CAAzB;AAIA,SAAO,sBAAS,YAAM;AACrB,QAAMK,oBAAoB,GAAGF,kBAAkB,CAACC,OAAnB,CAC5BF,QAAQ,CAACI,QADmB,EAE5BJ,QAF4B,CAA7B;AAIA,WAAO,uBACNG,oBADM,EAEN,UAAEE,UAAF,EAAcC,QAAd,EAA4B;AAC3B,UAAK,OAAOD,UAAP,KAAsB,UAA3B,EAAwC;AACvC;AACAE,QAAAA,OAAO,CAACC,IAAR,oBACcF,QADd;AAGA;;AACD,aAAO;AAAA;;AAAA,eAAe,yBAAAL,kBAAkB,CACtCC,OADoB,CACXF,QAAQ,CAACI,QADE,EACQJ,QADR,GACoBM,QADpB,yCAAf;AAAA,OAAP;AAEA,KAXK,CAAP;AAaA,GAlBM,GAkBFN,QAlBE,0CAkBWD,IAlBX,GAAP;AAmBA,CA3BD;;eA6BeF,kB","sourcesContent":["/**\n * External dependencies\n */\nimport { mapValues } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { useMemo, useRef, useEffect, useLayoutEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useRegistry from '../registry-provider/use-registry';\n\n/**\n * Favor useLayoutEffect to ensure the store subscription callback always has\n * the dispatchMap from the latest render. If a store update happens between\n * render and the effect, this could cause missed/stale updates or\n * inconsistent state.\n *\n * Fallback to useEffect for server rendered components because currently React\n * throws a warning when using useLayoutEffect in that environment.\n */\nconst useIsomorphicLayoutEffect =\n\ttypeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n/**\n * Custom react hook for returning aggregate dispatch actions using the provided\n * dispatchMap.\n *\n * Currently this is an internal api only and is implemented by `withDispatch`\n *\n * @param {Function} dispatchMap  Receives the `registry.dispatch` function as\n *                                the first argument and the `registry` object\n *                                as the second argument.  Should return an\n *                                object mapping props to functions.\n * @param {Array}    deps         An array of dependencies for the hook.\n * @return {Object}  An object mapping props to functions created by the passed\n *                   in dispatchMap.\n */\nconst useDispatchWithMap = ( dispatchMap, deps ) => {\n\tconst registry = useRegistry();\n\tconst currentDispatchMap = useRef( dispatchMap );\n\n\tuseIsomorphicLayoutEffect( () => {\n\t\tcurrentDispatchMap.current = dispatchMap;\n\t} );\n\n\treturn useMemo( () => {\n\t\tconst currentDispatchProps = currentDispatchMap.current(\n\t\t\tregistry.dispatch,\n\t\t\tregistry\n\t\t);\n\t\treturn mapValues(\n\t\t\tcurrentDispatchProps,\n\t\t\t( dispatcher, propName ) => {\n\t\t\t\tif ( typeof dispatcher !== 'function' ) {\n\t\t\t\t\t// eslint-disable-next-line no-console\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Property ${ propName } returned from dispatchMap in useDispatchWithMap must be a function.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn ( ...args ) => currentDispatchMap\n\t\t\t\t\t.current( registry.dispatch, registry )[ propName ]( ...args );\n\t\t\t}\n\t\t);\n\t}, [ registry, ...deps ] );\n};\n\nexport default useDispatchWithMap;\n"]}