{"version":3,"sources":["@wordpress/hooks/src/createHasHook.js"],"names":["createHasHook","hooks","hasHook","hookName","namespace","handlers","some","hook"],"mappings":"AAAA;;;;;;;;;AASA,SAASA,aAAT,CAAwBC,KAAxB,EAAgC;AAC/B;;;;;;;;;AASA,SAAO,SAASC,OAAT,CAAkBC,QAAlB,EAA4BC,SAA5B,EAAwC;AAC9C;AACA,QAAK,gBAAgB,OAAOA,SAA5B,EAAwC;AACvC,aAAOD,QAAQ,IAAIF,KAAZ,IACNA,KAAK,CAAEE,QAAF,CAAL,CAAkBE,QAAlB,CAA2BC,IAA3B,CAAiC,UAAEC,IAAF;AAAA,eAAYA,IAAI,CAACH,SAAL,KAAmBA,SAA/B;AAAA,OAAjC,CADD;AAEA;;AAED,WAAOD,QAAQ,IAAIF,KAAnB;AACA,GARD;AASA;;AAED,eAAeD,aAAf","sourcesContent":["/**\n * Returns a function which, when invoked, will return whether any handlers are\n * attached to a particular hook.\n *\n * @param  {Object}   hooks Stored hooks, keyed by hook name.\n *\n * @return {Function}       Function that returns whether any handlers are\n *                          attached to a particular hook and optional namespace.\n */\nfunction createHasHook( hooks ) {\n\t/**\n\t * Returns whether any handlers are attached for the given hookName and optional namespace.\n\t *\n\t * @param {string}  hookName  The name of the hook to check for.\n\t * @param {?string} namespace Optional. The unique namespace identifying the callback\n\t *                                      in the form `vendor/plugin/function`.\n\t *\n\t * @return {boolean} Whether there are handlers that are attached to the given hook.\n\t */\n\treturn function hasHook( hookName, namespace ) {\n\t\t// Use the namespace if provided.\n\t\tif ( 'undefined' !== typeof namespace ) {\n\t\t\treturn hookName in hooks &&\n\t\t\t\thooks[ hookName ].handlers.some( ( hook ) => hook.namespace === namespace );\n\t\t}\n\n\t\treturn hookName in hooks;\n\t};\n}\n\nexport default createHasHook;\n"]}