{"version":3,"file":"editor.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./src/blocks/firstblock/index.js","webpack:///./src/blocks/secondblock/edit.js","webpack:///./src/blocks/secondblock/index.js","webpack:///./src/blocks/secondblock/styles.editor.scss","webpack:///./src/blocks/teammember/edit.js","webpack:///./src/blocks/teammember/index.js","webpack:///./src/blocks/teammember/parent.js","webpack:///./src/blocks/teammember/style.editor.scss","webpack:///./src/editor.js","webpack:///external [\"wp\",\"blob\"]","webpack:///external [\"wp\",\"blocks\"]","webpack:///external [\"wp\",\"components\"]","webpack:///external [\"wp\",\"data\"]","webpack:///external [\"wp\",\"editor\"]","webpack:///external [\"wp\",\"element\"]","webpack:///external [\"wp\",\"i18n\"]"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/editor.js\");\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","var registerBlockType = wp.blocks.registerBlockType;\nvar __ = wp.i18n.__;\nvar el = wp.element.createElement;\n\nregisterBlockType('mytheme-blocks/firstblock', {\n    title: __('First Block', 'mytheme-blocks'),\n    description: __('Our first block', 'mytheme-blocks'),\n    category: 'layout',\n    icon: {\n        foreground: '#f03',\n        src: 'admin-network'\n    },\n    keywords: [__('photo', 'mytheme-blocks'),__('image', 'mytheme-blocks')],\n    edit: function() {\n        return el('p', null, 'Edited');\n    },\n    save: function() {\n        return el('p', null, 'Saved content');\n    }\n});","import { Component } from \"@wordpress/element\";\nimport { __ } from '@wordpress/i18n';\nimport { Toolbar, DropdownMenu, RangeControl, PanelBody } from \"@wordpress/components\";\nimport { RichText, BlockControls, AlignmentToolbar, InspectorControls, PanelColorSettings, withColors, ContrastChecker } from \"@wordpress/editor\";\nimport classnames from 'classnames';\n\nclass Edit extends Component {\n    onChangeContent = (content) => {\n        this.props.setAttributes({content});\n    }\n    onChangeAlignment = (alignment) => {\n        this.props.setAttributes({alignment});\n    }\n    toggleShadow = () => {\n        this.props.setAttributes({shadow: !this.props.attributes.shadow});\n    }\n    onChangeShadowOpacity = (shadowOpacity) => {\n        this.props.setAttributes({shadowOpacity});\n    }\n    render() {\n        const {className, attributes, setTextColor, setBackgroundColor, backgroundColor, textColor } = this.props;\n        const { content, alignment, shadow, shadowOpacity } = attributes;\n        const classes = classnames(className, {\n            'has-shadow': shadow,\n            [`shadow-opacity-${shadowOpacity * 100}`]: shadowOpacity\n        })\n        return (\n            <>\n            <InspectorControls>\n                <PanelBody title={ __('Settings', 'mytheme-blocks')}>\n                    { shadow && \n                        <RangeControl \n                            label={ __( 'Shadow Opacity', 'mytheme-blocks' )}\n                            value={ shadowOpacity }\n                            onChange={ this.onChangeShadowOpacity }\n                            min={0.1}\n                            max={0.4}\n                            step={0.1}\n                        />\n                    }\n                </PanelBody>\n                <PanelColorSettings \n                    title={ __('Panel 2', 'mytheme-blocks')}\n                    colorSettings={[\n                        {\n                            value: backgroundColor.color,\n                            onChange: setBackgroundColor,\n                            label: __('Background Color', 'mytheme-blocks')\n                        },\n                        {\n                            value: textColor.color,\n                            onChange: setTextColor,\n                            label: __('Text Color', 'mytheme-blocks')\n                        }\n                    ]}\n                >\n                    <ContrastChecker \n                        textColor={textColor.color}\n                        backgroundColor={backgroundColor.color}\n                    />\n                </PanelColorSettings>\n\n            </InspectorControls>\n            <BlockControls\n                controls={[\n                    {\n                        icon: 'wordpress',\n                        title: __('Shadow', 'mytheme-blocks'),\n                        onClick: this.toggleShadow,\n                        isActive: shadow\n                    }\n                ]}>\n                <AlignmentToolbar \n                    value={ alignment }\n                    onChange={ this.onChangeAlignment }\n                />\n                <Toolbar\n                    controls={[\n                            [{\n                                icon: 'wordpress',\n                                title: __('test', 'mytheme-blocks'),\n                                onClick: () => {alert('hello')},\n                                isActive: false\n                            }],\n                            [{\n                                icon: 'wordpress',\n                                title: __('test', 'mytheme-blocks'),\n                                onClick: () => {alert('hello')},\n                                isActive: false\n                            }]\n                        ]}\n                ></Toolbar>\n                {(content && content.length > 0) && \n                <Toolbar>\n                    <DropdownMenu \n                        icon= 'editor-table'\n                        label= { __('test', 'mytheme-blocks')}\n                        controls={[\n                            [{\n                                icon: 'wordpress',\n                                title: __('test', 'mytheme-blocks'),\n                                onClick: () => {alert('hello')},\n                                isActive: false\n                            }],\n                            [{\n                                icon: 'wordpress',\n                                title: __('test', 'mytheme-blocks'),\n                                onClick: () => {alert('hello')},\n                                isActive: false\n                            }]\n                        ]}\n                    />\n                </Toolbar>\n                }\n            </BlockControls>\n            <RichText \n                tagName=\"h4\"\n                className={classes}\n                onChange={ this.onChangeContent }\n                value={ content }\n                formattingControls={['bold']}\n                style={ {textAlign: alignment, backgroundColor: backgroundColor.color, color: textColor.color} }\n            />\n            </>\n        )\n    }\n}\n\nexport default withColors('backgroundColor', {'textColor': 'color'})(Edit);","import './styles.editor.scss';\nimport { registerBlockType, createBlock } from '@wordpress/blocks'; \nimport { __ } from '@wordpress/i18n';\nimport { RichText, getColorClassName } from \"@wordpress/editor\";\nimport Edit from './edit';\nimport classnames from 'classnames';\n\nconst attributes = {\n    content: {\n        type: 'string',\n        source: 'html',\n        selector: 'h4'\n    },\n    alignment: {\n        type: 'string'\n    },\n    backgroundColor: {\n        type: 'string'\n    },\n    textColor: {\n        type: 'string'\n    },\n    customBackgroundColor: {\n        type: 'string'\n    },\n    customTextColor: {\n        type: 'string'\n    },\n    shadow: {\n        type: 'boolean',\n        default: false\n    },\n    shadowOpacity: {\n        type: 'number',\n        default: 0.3\n    }\n}\n\nregisterBlockType('mytheme-blocks/secondblock', {\n    title: __('Second Block', 'mytheme-blocks'),\n    description: __('Our second block', 'mytheme-blocks'),\n    category: 'mytheme-category',\n    icon: 'admin-network',\n    keywords: [__('photo', 'mytheme-blocks'),__('image', 'mytheme-blocks')],\n    styles: [\n        {\n            name: 'rounded',\n            label: __('Rounded', 'mytheme-blocks'),\n            isDefault: true\n        },\n        {\n            name: 'outlined',\n            label: __('Outlined', 'mytheme-blocks')\n        },\n        {\n            name: 'squared',\n            label: __('Squared', 'mytheme-blocks')\n        }\n    ],\n    attributes,\n    deprecated: [\n        {\n            attributes: {\n                ...attributes,\n                content: {\n                    type: 'string',\n                    source: 'html',\n                    selector: 'p'\n                } \n            },\n            save: ({ attributes }) => {\n                const { content, alignment, backgroundColor, textColor, customBackgroundColor, customTextColor, shadow, shadowOpacity } = attributes\n                const backgroundClass = getColorClassName('background-color', backgroundColor);\n                const textClass = getColorClassName('color', textColor);\n                const classes = classnames({\n                    [backgroundClass]: backgroundClass,\n                    [textClass]: textClass,\n                    'has-shadow': shadow,\n                    [`shadow-opacity-${shadowOpacity * 100}`]: shadowOpacity\n                })\n                return <RichText.Content\n                        tagName=\"h4\"\n                        className={ classes }\n                        value={ content }\n                        style={ {\n                            textAlign: alignment, \n                            backgroundColor: backgroundClass ? undefined : customBackgroundColor, \n                            color: textColor ? undefined : customTextColor\n                        } }\n                />\n            }\n        }\n    ],\n    transforms: {\n        from: [\n            {\n                type: 'block',\n                blocks: ['core/paragraph'],\n                transform: ( {content, align}) => {\n                    return createBlock('mytheme-blocks/secondblock', {\n                        content: content,\n                        textAlign: align\n                    });\n                }\n            },\n            {\n                type: 'prefix',\n                prefix: '#',\n                transform: () => {\n                    return createBlock('mytheme-blocks/secondblock');\n                }\n            }\n        ],\n        to: [\n            {\n                type: 'block',\n                blocks: ['core/paragraph'],\n                isMatch: ({content}) => {\n                    if(content) return true;\n                    return false;\n                },\n                transform: ( {content, textAlign}) => {\n                    return createBlock('core/paragraph', {\n                        content: content,\n                        align: textAlign\n                    });\n                }\n\n            }\n        ]\n    },\n    edit: Edit,\n    save: ({ attributes }) => {\n        const { content, alignment, backgroundColor, textColor, customBackgroundColor, customTextColor, shadow, shadowOpacity } = attributes\n        const backgroundClass = getColorClassName('background-color', backgroundColor);\n        const textClass = getColorClassName('color', textColor);\n        const classes = classnames({\n            [backgroundClass]: backgroundClass,\n            [textClass]: textClass,\n            'has-shadow': shadow,\n            [`shadow-opacity-${shadowOpacity * 100}`]: shadowOpacity\n        })\n        return <RichText.Content\n                tagName=\"h4\"\n                className={ classes }\n                value={ content }\n                style={ {\n                    textAlign: alignment, \n                    backgroundColor: backgroundClass ? undefined : customBackgroundColor, \n                    color: textColor ? undefined : customTextColor\n                } }\n        />\n    }\n});","// extracted by mini-css-extract-plugin","import { Component } from \"@wordpress/element\";\nimport { RichText, MediaPlaceholder, BlockControls, MediaUpload, MediaUploadCheck, InspectorControls } from \"@wordpress/editor\";\nimport { __ } from \"@wordpress/i18n\";\nimport { isBlobURL } from \"@wordpress/blob\";\nimport { Spinner, withNotices, Toolbar, IconButton, PanelBody, TextareaControl, SelectControl, Dashicon, Tooltip } from \"@wordpress/components\";\nimport { withSelect } from \"@wordpress/data\";\n\nclass TeamMemberEdit extends Component {\n\n    state = {\n        selectedLink: null\n    }\n\n    componentDidMount() {\n        const {attributes, setAttributes} = this.props;\n        const { url, id } = attributes;\n        if( url && isBlobURL(url) && !id ) {\n            setAttributes({\n                url: '',\n                alt: ''\n            })\n        }\n    }\n    componentDidUpdate( prevProps ) {\n        if(prevProps.isSelected && !this.props.isSelected) {\n            this.setState({\n                selectedLink: null\n            })\n        }\n    }\n    onChangeTitle = (title) => {\n        this.props.setAttributes({title});\n    }\n    onChangeInfo = (info) => {\n        this.props.setAttributes({info});\n    }\n    onSelectImage = ({id, url, alt}) => {\n        this.props.setAttributes({\n            id, url, alt\n        });\n    }\n    onSelectURL = ({url}) => {\n        this.props.setAttributes({\n            url,\n            id: null,\n            alt: ''\n        })\n    }\n    onUploadError = (message) => {\n        const { noticeOperations } = this.props;\n        noticeOperations.createErrorNotice(message);\n    }\n    removeImage = () => {\n        this.props.setAttributes({\n            id: null,\n            url: '',\n            alt: ''\n        })\n    }\n    updateAlt = (alt) => {\n        this.props.setAttributes({\n            alt\n        })\n    }\n    onImageSizeChange = (url) => {\n        this.props.setAttributes({\n            url\n        })\n    }\n    getImageSizes() {\n        const { image, imageSizes } = this.props;\n        if (!image) return [];\n        let options = [];\n        const sizes = image.media_details.sizes;\n        for( const key in sizes ) {\n            const size = sizes[key];\n            const imageSize = imageSizes.find(size => size.slug === key);\n            if (imageSize) {\n                options.push({\n                    label: imageSize.name,\n                    value: size.source_url\n                })\n            }\n        }\n        return options;\n    }\n    addNewLink = () => {\n        const { setAttributes, attributes } = this.props;\n        const { social } = attributes;\n        setAttributes({\n            social: [...social, {link: '', icon: 'wordpress'}]\n        })\n        this.setState({\n            selectedLink: social.length\n        })\n    }\n    render() {\n        const { className, attributes, noticeUI, isSelected } = this.props;\n        const { title, info, url, alt, id, social } = attributes;\n        return (\n            <>  \n                <InspectorControls>\n                    <PanelBody title={ __(\"Image Settings\", \"mytheme-blocks\") }>\n                        {(url && !isBlobURL(url)) &&\n                            <TextareaControl \n                                label={ __('Alt Text', \"mytheme-blocks\") }\n                                value={ alt }\n                                onChange={ this.updateAlt }\n                                help={ __( 'Alternative text describes the image to people who can not see it', 'mytheme-blocks') }\n                            />\n                        }\n                        {id && \n                            <SelectControl \n                                label={ __('Image Size', \"mytheme-blocks\") }\n                                options={ this.getImageSizes() }\n                                onChange={ this.onImageSizeChange }\n                                value={url}\n                            />\n                        }\n                    </PanelBody>\n                </InspectorControls>\n                <BlockControls>\n                    {url &&\n                        <Toolbar>\n                            {id && \n                                <MediaUploadCheck>\n                                    <MediaUpload \n                                        onSelect={ this.onSelectImage }\n                                        allowedTypes={['image']}\n                                        value={ id }\n                                        render={({open}) => {\n                                            return (\n                                                <IconButton \n                                                    className=\"components-icon-button components-toolbar__control\"\n                                                    label={ __('Remove Image', 'mytheme-blocks') }\n                                                    onClick={ open }\n                                                    icon=\"edit\"\n                                                />\n                                            )\n                                        }}\n                                    />\n                                </MediaUploadCheck>\n                            }\n                            <IconButton \n                                className=\"components-icon-button components-toolbar__control\"\n                                label={ __('Remove Image', 'mytheme-blocks') }\n                                onClick={ this.removeImage }\n                                icon=\"trash\"\n                            />\n                        </Toolbar>\n                    }\n                </BlockControls>\n                <div className={ className }>\n                    {url ? \n                        <>\n                            <img src={src} alt={alt} />\n                            {isBlobURL(url) && <Spinner />}\n                        </>\n                        : <MediaPlaceholder \n                            icon=\"format-image\"\n                            onSelect={this.onSelectImage}\n                            onSelectURL={this.onSelectURL}\n                            onError={this.onUploadError}\n                            accept=\"image/*\"\n                            allowedTypes={['image']}\n                            notices={noticeUI}\n                        />\n                    }\n                    <RichText \n                        className={'wp-block-mytheme-blocks-teammember__title'}\n                        tagName=\"h4\"\n                        onChange={this.onChangeTitle}\n                        value={title}\n                        placeholder={__('Member Name', 'mytheme-blocks')}\n                        formattingControls={[]}\n                    />\n                    <RichText \n                        className={'wp-block-mytheme-blocks-teammember__info'}\n                        tagName=\"p\"\n                        onChange={this.onChangeInfo}\n                        value={info}\n                        placeholder={__('Member Info', 'mytheme-blocks')}\n                        formattingControls={[]}\n                    />\n                    <div className={'wp-block-mytheme-blocks-teammember__social'}>\n                        <ul>\n                            {social.map((item, index) => {\n                                <li\n                                    key={index}\n                                    onClick={() => this.setState({selectedLink: index})}\n                                    className={this.state.selectedLink === index ? 'is-selected' : null}\n                                ><Dashicon icon={item.icon} size={16}/></li>\n                            })}\n                            {isSelected && \n                                <li className={'wp-block-mytheme-blocks-teammember__addIconLI'}>\n                                    <Tooltip text={__('Add Item', 'mytheme-blocks')}>\n                                        <button className={'wp-block-mytheme-blocks-teammember__addIcon'} onClick={this.addNewLink}>\n                                            <Dashicon icon={'plus'} size={14}/>\n                                        </button>\n                                    </Tooltip>\n                                </li>\n                            }\n                        </ul>\n                    </div>\n\n                </div>\n            </>\n        )\n\n    }\n}\n\nexport default withSelect((select, props) => {\n    const id = props.attributes.id;\n    return {\n        image: id ? select('core').getMedia(id) : null,\n        imageSizes: select('core/editor').getEditorSettings().imageSizes\n    }\n})(withNotices(TeamMemberEdit));","import './style.editor.scss';\nimport './parent';\nimport { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport edit from \"./edit\";\nimport { RichText } from \"@wordpress/editor\";\nimport { Dashicon } from '@wordpress/components';\n\nconst attributes = {\n    title: {\n        type: 'string',\n        source: 'html',\n        selector: 'h4'\n    },\n    info: {\n        type: 'string',\n        source: 'html',\n        selector: 'p'\n    },\n    id: {\n        type: 'number'\n    },\n    alt: {\n        type: 'string',\n        source: 'attribute',\n        selector: 'img',\n        attribute: 'alt',\n        default: ''\n    },\n    url: {\n        type: 'string',\n        source: 'attribute',\n        selector: 'img',\n        attribute: 'src',\n    },\n    social: {\n        type: 'array',\n        default: [\n            { link: 'http://facebook.com', icon: 'wordpress' },\n            { link: 'http://facebook.com', icon: 'wordpress' }\n        ],\n        source: 'query',\n        selector: '.wp-block-mytheme-blocks-teammember__social ul li',\n        query: {\n            icon: {\n                source: 'attribute',\n                attribute: 'data-icon'\n            },\n            link: {\n                source: 'attribute',\n                selector: 'a',\n                attribute: 'href'\n            }\n        }\n    }\n}\n\nregisterBlockType('mytheme-blocks/teammember', {\n    title: __( 'Team Member', 'mytheme-blocks'),\n    description: __( 'Block showing a Team Member', 'mytheme-blocks'),\n    icon: 'admin-users',\n    parent: ['mytheme-blocks/teammembers'],\n    supports: {\n        reusable: false,\n        html: false\n    },\n    category: 'mytheme-category',\n    keywords: [ __('team','mytheme-blocks'), __('member','mytheme-blocks'), __('person','mytheme-blocks')],\n    attributes,\n    save: ( {attributes} ) => {\n        const { title, info, url, alt, id, social } = attributes;\n        return (\n            <div>\n                {url && \n                    <img src={url} alt={alt} className={id ? `wp-image-${id}`: null}/>\n                }\n                {title && \n                    <RichText.Content\n                        className={'wp-block-mytheme-blocks-teammember__title'}\n                        tagName=\"h4\"\n                        value={title}\n                    />\n                }\n                {info &&\n                    <RichText.Content\n                        className={'wp-block-mytheme-blocks-teammember__info'}\n                        tagName=\"p\"\n                        value={info}\n                    />\n                }\n                {social.length > 0 && \n                    <div className={'wp-block-mytheme-blocks-teammember__social'}>\n                        <ul>\n                            {social.map((item, index) => {\n                                return (\n                                    <li key={index} data-icon={item.icon}>\n                                        <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            <Dashicon icon={item.icon} size={16}/>\n                                        </a>\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                }\n            </div>\n        )\n    },\n    edit\n});","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { InnerBlocks, InspectorControls } from \"@wordpress/editor\";\nimport { PanelBody, RangeControl } from \"@wordpress/components\";\n\nconst attributes = {\n    columns: {\n        type: 'number',\n        default: 2\n    }\n}\n\nregisterBlockType('mytheme-blocks/teammembers', {\n    title: __('Team Members', 'mytheme-blocks'),\n    description: __('Block showing Team Members', 'mytheme-blocks'),\n    icon: 'grid-view',\n    category: 'mytheme-category',\n    supports: {\n        html: false,\n        align: ['wide', 'full']\n    },\n    keywords: [ __('team', 'mytheme-blocks'), __('member', 'mytheme-blocks'), __('person', 'mytheme-blocks')],\n    attributes,\n    edit({className, attributes, setAttributes}) {\n        const { columns } = attributes;\n        return (\n            <div className={`${className} has-${columns}-columns`}>\n                <InspectorControls>\n                    <PanelBody>\n                        <RangeControl \n                            label={ __('Columns', 'mytheme-blocks') }\n                            value={ columns }\n                            onChange={(columns) => setAttributes({columns})}\n                            min={1}\n                            max={6}\n                        />\n                    </PanelBody>\n                </InspectorControls>\n                <InnerBlocks \n                    allowedBlocks={ ['mytheme-blocks/teammember'] }\n                    template={[\n                        ['mytheme-blocks/teammember'],\n                        ['mytheme-blocks/teammember']\n                    ]}\n                />\n            </div>\n        )\n    },\n    save( {attributes }) {\n        const { columns } = attributes;\n        return (\n            <div className={`has-${columns}-columns`}>\n                <InnerBlocks.Content />\n            </div>\n        )\n    }\n})","// extracted by mini-css-extract-plugin","import './blocks/firstblock';\nimport './blocks/secondblock';\nimport './blocks/teammember';","module.exports = wp[\"blob\"];","module.exports = wp[\"blocks\"];","module.exports = wp[\"components\"];","module.exports = wp[\"data\"];","module.exports = wp[\"editor\"];","module.exports = wp[\"element\"];","module.exports = wp[\"i18n\"];"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,UAEA;AACA;;;;;;;;;;;;ACnDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AAvHA;AACA;AAyHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzBA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AA7BA;AAgCA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAWA;AACA;AACA;AACA;AACA;AALA;AAQA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAZA;AArBA;AAsCA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAlHA;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;AAoBA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AADA;AAGA;AACA;;;;;;AAnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAwCA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AALA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAbA;AACA;AAIA;AAAA;AASA;AACA;AAAA;AACA;;;AAWA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AA1MA;AACA;AA4MA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AC1NA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AARA;AA3BA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAMA;AACA;AAnDA;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AA3CA;;;;;;;;;;;ACZA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;ACDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}